name: Parser
run-name: Parser ${{ github.event_name == 'push' && 'main' || format('MR {0}', github.event.pull_request.title) }}
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [main]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Rust
        id: setup-rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly, stable
          components: rustfmt, clippy
          target: x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu
          cache: true

      - name: Cache cargo tools
        id: cache-cargo-tools
        uses: actions/cache@v4
        with:
          path: ~/.cargo
          key: cargo-bin-build-${{ runner.os }}-${{ steps.setup-rust.outputs.cargo-version }}

      - name: Install cargo tools
        if: steps.cache-cargo-tools.outputs.cache-hit != 'true'
        run: cargo install cargo-make
        shell: bash

      - name: Check formatting
        run: cargo make format-check

      - name: Run security audit
        run: cargo make audit

      - name: Run clippy
        run: cargo make clippy

      - name: Build x64
        run: cargo make build

      - name: Cache apt packages
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: aarch64-toolchain-${{ runner.os }}-${{ steps.setup-rust.outputs.cargo-version }}

      - name: Install ARM64 cross toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build arm
        run: cargo make build-arm

  build-wasm:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Rust
        id: setup-rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
          cache: true

      - name: Cache cargo tools
        id: cache-cargo-tools
        uses: actions/cache@v4
        with:
          path: ~/.cargo
          key: cargo-bin-wasm-${{ runner.os }}-${{ steps.setup-rust.outputs.cargo-version }}

      - name: Install cargo tools
        if: steps.cache-cargo-tools.outputs.cache-hit != 'true'
        run: |
          cargo install cargo-make
          cargo install wasm-tools
        shell: bash

      - name: Build wasm
        run: cargo make build-wasm

      - name: Pack wasm
        run: cargo make pack-wasm

      - name: Validate wasm
        run: |
          if wasm-tools print js-package/src/graphl_parser_bg.wasm | grep -q "signature_mismatch"; then
            echo "Error: signature_mismatch detected in wasm module!"
            wasm-tools print js-package/src/graphl_parser_bg.wasm | grep "signature_mismatch"
            exit 1
          fi
          if wasm-tools print js-package/src/graphl_parser_bg.wasm | grep -q "import \"env\""; then
            echo "Error: unresolved symbols detected in wasm module!"
            wasm-tools print js-package/src/graphl_parser_bg.wasm | grep "import \"env\""
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v5
        with:
          name: build-artifact
          path: js-package/src

  publish-wasm:
    runs-on: ubuntu-latest
    needs: [build, build-wasm]
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: write
      packages: write

    env:
      NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    defaults:
      run:
        working-directory: js-package

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: ${{ github.head_ref }}

      - name: Download artifact
        uses: actions/download-artifact@v6
        with:
          name: build-artifact
          path: js-package/src

      - name: Set up Node.js
        uses: actions/setup-node@v6
        with:
          cache: npm
          cache-dependency-path: js-package/package.json

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Bump version
        run: npm version patch --no-git-tag-version --no-commit-hooks --no-workspaces-update

      - name: Publish
        run: npm publish --no-git-checks --access public
        env:
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update package.json
        uses: stefanzweifel/git-auto-commit-action@v7
        with:
          commit_message: Apply package.json changes for js bindings

  publish-tag:
    runs-on: ubuntu-latest

    needs: publish-wasm
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: "0"

      - name: Create Tag
        uses: anothrNick/github-tag-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_PREFIX: ""
          DEFAULT_BUMP: patch
